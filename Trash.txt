
1. Probar de cambiar parametros del RandomForest
2. Probar de borrar alguna columna en el RandomForest para ver si sube el accuracy (si es así, probar el los otros modelos)
3. Probar de agrupar respuestas similares en el RandomForest para ver si sube el accuracy (si es así, probar el los otros modelos)
4. Probar de hacer lo de generar gráficos con las combinaciones de parámetros de un modelo. Lo mismo, si sale con RandomForest, hazlo con los otros.


- Probar el otro modelo (cross validation o SVC)
- Puedes hacer que en una misma iteración hagas lo de modeling y evaluating dos veces,
  una sin aplicar cierta modificación y otra aplicandola, para que se vea el cambio
- Apartado extra: probar de predecir otra pregunta y hacer red neuronal


-----------------------------------------------------------------------------------------------------------------------


TESTEO DE NN:

"""
fitness2_4.to_csv("data_fitness/raw/fitness analysis nn.csv")
fitness_nn = np.loadtxt(PATH_DATA_RAW + 'fitness analysis nn.csv', delimiter= ",", skiprows=1, usecols=range(1,14))
#
print(fitness_nn)
#
n_features = 12
x = fitness_nn[:,:n_features]
y = fitness_nn[:, n_features:]
#
plt.figure(figsize=(20,10))
sns.histplot(data = x, kde = True)
print("Dataset before scale()")
#
# Standardize the input features
x = scale(x)
# Now we have X - a scaled dataset with all the features
#
plt.figure(figsize=(20,10))
sns.histplot(data = x, kde = True)
print("Dataset after applying scale() function")
#
y.shape
# Encode categorical features as a one-hot numeric array.
oneHot = OneHotEncoder()
# Fit OneHotEncoder to X, then transform X. Then to an array
y = oneHot.fit_transform(y).toarray()
#
y.shape
"""


TESTEO GRÁFICAS ARGUMENTOS:

from sklearn.metrics import roc_curve, auc
false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_pred)
roc_auc = auc(false_positive_rate, true_positive_rate)
roc_auc

max_depths = np.linspace(1, 32, 32, endpoint=True)
train_results = []
test_results = []
for max_depth in max_depths:
   dt = DecisionTreeClassifier(max_depth=max_depth)
   dt.fit(X_train, y_train)
   train_pred = dt.predict(X_train)
   false_positive_rate, true_positive_rate, thresholds = roc_curve(y_train, train_pred, pos_label='1')
   roc_auc = auc(false_positive_rate, true_positive_rate)
   # Add auc score to previous train results
   train_results.append(roc_auc)
   y_pred = dt.predict(X_test)
   false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_pred, pos_label='1')
   roc_auc = auc(false_positive_rate, true_positive_rate)
   # Add auc score to previous test results
   test_results.append(roc_auc)
from matplotlib.legend_handler import HandlerLine2D
line1, = plt.plot(max_depths, train_results, 'b', label="Train AUC")
line2, = plt.plot(max_depths, test_results, 'r', label="Test AUC")
plt.legend(handler_map={line1: HandlerLine2D(numpoints=2)})
plt.ylabel('AUC score')
plt.xlabel('Tree depth')
plt.show()


TESTEO DE ELIMINAR COLUMNAS CON BAJA CORRELACIÓN:

"""
fitness3_1 = fitness3_1.drop(['Would you say you eat a healthy balanced diet ?'], axis=1)
fitness3_1 = fitness3_1.drop(['Your gender '], axis=1)
fitness3_1 = fitness3_1.drop(['Your age '], axis=1)
fitness3_1 = fitness3_1.drop(['How important is exercise to you ?'], axis=1)
fitness3_1 = fitness3_1.drop(['How often do you exercise?'], axis=1)
fitness3_1 = fitness3_1.drop(['Do you exercise ___________ ?'], axis=1)
fitness3_1 = fitness3_1.drop(['What time if the day do you prefer to exercise?'], axis=1)
fitness3_1 = fitness3_1.drop(['What prevents you from eating a healthy balanced diet, If any?                         (Please select all that apply)'], axis=1)
fitness3_1 = fitness3_1.drop(['How healthy do you consider yourself?'], axis=1)
fitness3_1 = fitness3_1.drop(['Have you ever recommended your friends to follow a fitness routine?'], axis=1)
fitness3_1 = fitness3_1.drop(['Have you ever purchased a fitness equipment?'], axis=1)
"""


TESTEO ARGUPAR RESPUESTAS

# CHANGE
fitness1_3 = fitness1_3.replace({'How often do you exercise?': 
{"1 to 2 times a week": 0,
"Never": 1,
"2 to 3 times a week": 2,
"3 to 4 times a week": 3,
"Everyday": 4,
"5 to 6 times a week": 4}})

# CHANGE
fitness1_3 = fitness1_3.replace({'Do you exercise ___________ ?': 
{"Alone": 0,
"I don't really exercise": 1,
"With a friend": 2,
"With a group": 3,
"Within a class environment": 3}})

ULTRA INDEX

# Table Of Contents
* [1. Introduction](#0)
* [2. Problem Definition](#0)
* [3. Prepare The Data](#0)
    * [3.1 Dependencies](#0)
    * [3.2 Data Loading](#0)
    * [3.3 Fitness Simplification](#0)
* [4. Data Understandind](#0)
    * [4.1 First Look](#0)
    * [4.2 Column Study](#0)
        * [4.2.1 Name of the person attending the survey](#0)
        *
        *
    * [4.3 Relevant Observations](#0)
* [5. First Iteration](#0)
    * [5.1 Data Preparation](#0)
        * [5.1.1 Drop columns with unique answers](#0)
        * [5.1.2 Drop columns with multiple answers](#0)
        * [5.1.3 Change every string value to integer value](#0)
        * [5.1.4 Train-test Split](#0)
    * [5.2 Modeling & Evaluation](#0)
        * [5.2.1 Logistic Regression](#0)
        * [5.2.2 Performance Evaluation](#0)
    * [5.3 Following Iteration](#0)
* [6. Second Iteration](#0)
    * [6.1 Data Preparation](#0)
        * [6.1.1 Drop columns with unique answers](#0)
        * [6.1.2 Treat columns with multiple answers](#0)
        * [6.1.3 Change every string value to integer value](#0)
        * [6.1.4 Train-test Split](#0)
    * [6.2 Modeling & Evaluation](#0)
        * [6.2.1 Decision Tree](#0)
        * [6.2.2 Performance Evaluation](#0)
    * [6.3 Following Iteration](#0)
* [6. Second Iteration](#0)
    * [6.1 Data Preparation](#0)
        * [6.1.1 Drop columns with unique answers](#0)
        * [6.1.2 Treat columns with multiple answers](#0)
        * [6.1.3 Change every string value to integer value](#0)
        * [6.1.4 Train-test Split](#0)
    * [6.2 Modeling & Evaluation](#0)
        * [6.2.1 Decision Tree](#0)
        * [6.2.2 Performance Evaluation](#0)
    * [6.3 Following Iteration](#0)
* [7. Third Iteration](#0)
    * [7.1 Data Preparation](#0)
        * [7.1.1 Drop columns with unique answers](#0)
        * [7.1.2 Treat columns with multiple answers](#0)
        * [7.1.3 Group similar answers](#0)
        * [7.1.4 Change every string value to integer value](#0)
        * [7.1.5 Drop irrelevant columns](#0)
        * [7.1.6 Outliers treatment](#0)
        * [7.1.7 Train-test Split](#0)
    * [7.2 Modeling & Evaluation](#0)
        * [7.2.1 Random Forest](#0)
        * [7.2.2 Performance Evaluation](#0)
* [8. Conclusions](#0)